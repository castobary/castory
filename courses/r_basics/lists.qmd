---
title: "Working with Lists"
author: "Castory Munishi"
date: 10/21/2023
execute: 
  echo: true
  warning: false
format: revealjs
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Lists

+ Lists can contain multiple types of objects.

+ The objects may consist of different data structures, including single data elements, vectors, and matrices.


## Using Lists

+ Why would we want to create lists of objects in R? 

+ Storing objects in lists allows us to make use of some very powerful R features.

+ Allows performing the same operation on each object in your list hence avoiding repetitively typing the same function.

+ Lists store information that is used to compose complex structures like plots. e.g ggplot objects

## Creating lists

+ Lists are created by using a simple function `list()`

```{r code1}
uni_clubs <- list('ballroom dancing','rugby','bird watching','pottery')
uni_clubs
```

## Entering Data into a List 1/2

+ Data for chess club as an example

+ The data is entered into a vector as shown :


```{r code2}
club_title <- c('chess club')

club_description <- c('Meets two nights a week for members to play chess. Snacks are provided.')

club_dues <- c(50,20,15)

meeting_days <- c('Monday','Wednesday')

meeting_times <- c('6:00pm','8:00 pm')
club_meetings <- rbind(meeting_days, meeting_times)
```

## Entering Data into a List 2/2

```{r code3}
chess_club <- list(club_title,club_description,club_dues,club_meetings)
chess_club
```

## Object Naming in List

+ To specify names for list objects within the `list()` function, you can use `=`. 
+ For example, let's create a list containing data you've gathered about the rugby club:

```{r code4}
rugby_club <- list (club_title=c('Rugby Club'),
                    club_description=c('Plays matches against clubs from local universities'),
                    club_dues=c(100,50))
rugby_club
```

## Assigning Names to Lists 1/2

+ Assigning names to list objects is similar to assigning names to vector elements:
+ We'll use the `names()` accessor function.

```{r code5}
ballroom_dancing <- list (c('Ballroom Dancing Club'),
                          c('Practices waltz, salsa, and tango dancing for competitions with local university dance teams')
,c(150))

names(ballroom_dancing) <- c('club_title','club_description','club_dues')
```


## Output

```{r code6}
ballroom_dancing

```


## Assigning Names to Lists 2/2

+ Like vectors, if you call the `names()` function in a list without assigned names, the function will return NULL.

+ Let's assign names to objects of the chess_club list that we created earlier.

+ We have created a vector, chess_club_names, of names for the objects of the chess_club list. 

+ Use the `names()` function to assign the names as attributes to elements of the chess_club list.

## Code

```{r code7}
chess_club_names <- c('club_title','club_description',
                      'club_dues','club_meetings')
names(chess_club) <- chess_club_names
chess_club
```

## Indexing a List 1/5

+ use two different indexing operations on lists:
  
 1. Single brackets to return a list of selected elements `([])`
 2. Double brackets to return a single element `([[]])`
 
 + Example : Extracting the second element in Rugby Club
 
```{r code8}
rugby_club[2]
typeof(rugby_club[2])
```

## Indexing a list 2/5

+ Let's try performing this operation using double brackets:

```{r code9}
rugby_club[[2]]
typeof(rugby_club[[2]])
```


## Indexing a list 3/5

+ Like in vectors multiple elements can be extracted using `c()`

+ Let's use single brackets to extract the first and third objects in the rugby_club list:

```{r code10}
rugby_club[c(1,3)]
```


## Indexing a list 4/5

+ What happens if we use double brackets to index rugby_club?
+ Now, the output consists of the first element in the third object of the list:

```{r code11}
rugby_club[[c(3,1)]]
```


## Indexing a list 5/5 - Using names

+ When objects in a list have names associated with them, you can use them for indexing.


```{r code12}
rugby_club$club_description

rugby_club$club_dues[1]

rugby_club[[3]]
```

## Practice Indexing

+ Write code to give the second element in chess club


```{r code13}
chess_club[[c(3,2)]]
```

## Modifying List Elements 1/3

+  Addition to extracting elements, we can also index lists to change specific list components.

+ For example, let's say you spoke with a new friend who is a member of the rugby club. 

+ She tells you that the club dues paid by members at the start of the fall and spring semesters have increased by 10 USD each.

+ As a result, you'd like to change the values of club_dues you have stored in your rugby_club list.

+  To replace the old values with new values

```{r code14}
rugby_club$club_dues <- c(110,60,70,90)
```


## Output

```{r code15}
rugby_club
```

## Replacing Values

```{r code16}
rugby_club[[c(3,1)]] <- 80
rugby_club
```


## Modifying List Elements 2/3

+ Let's modify the chess_club list to reflect new information your research has turned up. 

+ Currently, chess club members pay dues during the fall semester (50 USD), spring semester (20 USD)

+ During summer (15 USD) if they are staying on campus. Since few students stay on campus and snack costs are low, the club captain is reducing summer club dues to 5 USD.


## Code and Output


```{r code17}
chess_club[[c(3,3)]] <- 5
chess_club
```

## Adding Elements to Lists

### Preparing the object to be added

+ Adding members of different years to the matrix

```{r code18}
fall <- c(8,12,13,2)
spring <- c(6,11,14,3)

member_year_rugby <- rbind(spring, fall)


colnames(member_year_rugby) <-c('first_yr','second_yr',
                                 'third_yr','fourth_yr')
member_year_rugby

mean(member_year_rugby[,'first_yr'])
```


## Adding Elements to Lists

### Adding the Object

+ Let's add member_years_chess as a fourth object of the list. 

+ To add an element to a list,  we can specify the position we want the new element to occupy using double brackets:


```{r code19}
rugby_club[["Member Year"]] <- member_year_rugby
```


## Output

```{r code20}
rugby_club
```


## Adding Elements to Lists

+ We've researched chess club membership and found the following  numbers of first-year members that joined during the spring and fall semesters last year:

+ Fall Semester: 12 Spring Semester: 15

+ Let's add this information to to our chess_club list.

```{r code21}
first_years <- c(12,15)
names(first_years) <- c('spring','fall')
first_years

chess_club[["first_years"]] <- first_years
```


## Output


```{r code22}
chess_club
```


## Combining Lists 1/2

+ Syntax for combining multiple lists is similar to that for combining vectors.
+ To combine the rugby_club and ballroom_dancing lists into a new list called uni_club_data, 
+ we can use the `c()` function:

```{r code23}
uni_club_data <- c(rugby_club,ballroom_dancing)
uni_club_data
```

## Combining Lists 2/2

+ Combining lists using `c()` attaches lists to one another, end-to-end, to create a single list.We can use it to combine as many lists as we need to

+ The uni_club_data list is confusing because some of the elements, like club_description, have the same name. 

+ We need a way to combine lists that preserves the organization of each list.

+  Recall that lists can contain any type of data object, including other lists. 
+ Instead of combining elements of the three lists into a single list as you did using `c()`,  you can use `list()` to create a new list of lists.

+ Let's create a list of lists, uni_club_list, to illustrate how this works.

```{r code24}
uni_club_list <- list(rugby_club =rugby_club,
                      ballroom_dancing = ballroom_dancing)
```

## Output

```{r code25}
uni_club_list
```

## Final Assignment

+ Create a new list, uni_clubs, that contains the following lists:
 
   +  rugby_club
   +  ballroom_dancing
   + chess_club

+ Instead of combining the list objects into a single list, create a list of lists by using the `list()` function.

+  Write your code so that each list within uni_clubs is named. Keep the original list names.

## Code

```{r code26}
uni_clubs <-list( rugby_club =rugby_club, 
                  ballroom_dancing = ballroom_dancing, 
                  chess_club = chess_club)
```