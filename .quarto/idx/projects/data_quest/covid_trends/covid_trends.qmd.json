{"title":"Investigating COVID-19 Trends","markdown":{"yaml":{"title":"Investigating COVID-19 Trends","author":"Castory Munishi","format":{"html":{"theme":"united","code-fold":true,"code-tools":true}},"date":"09/24/2022","editor":"visual","toc":true},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nA pneumonia of unknown cause detected in Wuhan, China was first internationally reported from China on 31 December 2019. Today we know this virus as Coronavirus. COVID-19 which stands for COronaVIrus Disease is the disease caused by this virus. Since then, the world has been engaged in the fight against this pandemic. Several measures have therefore been taken to \"flatten the curve\". We have consequently experienced social distancing and many people have passed away as well.\n\nIn the solidarity to face this unprecedented global crisis, several organizations did not hesitate to share several datasets allowing the conduction of several kinds of analysis in order to understand this pandemic.\n\nOur analysis tries to provide an answer to this question: Which countries have had the highest number of positive cases against the number of tests?\n\n### Information about the dataset\n\nThe dataset of our study contains daily & cumulative number of COVID-19 tests conducted, number of positive, hospitalized, recovered & death cases reported by country. In details here are the columns in the dataset:\n\n-   *Date*: Date\n-   *Continent_Name*: Continent names\n-   *Two_Letter_Country_Code*: Country codes\n-   *Country_Region*: Country names\n-   *Province_State*: States/province names; value is All States when state/provincial level data is not available\n-   *positive*: Cumulative number of positive cases reported.\n-   *active*: Number of active cases on that **day**.\n-   *hospitalized*: Cumulative number of hospitalized cases reported.\n-   *hospitalizedCurr*: Number of actively hospitalized cases on that **day**.\n-   *recovered*: Cumulative number of recovered cases reported.\n-   *death*: Cumulative number of deaths reported.\n-   *total_tested*: Cumulative number of tests conducted.\n-   *daily_tested*: Number of tests conducted on the **day**; if daily data is unavailable, daily tested is averaged across number of days in between.\n-   *daily_positive*: Number of positive cases reported on the **day**; if daily data is unavailable, daily positive is averaged across number of days in.\n\n```{r}\n#| echo: true\n#| message: false\n\n# loading packages and loading the dataset\npacman::p_load(\n  tidyverse,\n  magrittr)\n\nds <- read_csv(\"covid19.csv\")\n```\n\n## Task One\n\n-   Determine the dimension of the dataframe, covid_df by using the function `dim()`\n\n-   Determine the column names of covid_df using the colnames() function.\n\n    -   Store the result in the variable named vector_cols.\n    -   Display the content of this variable.\n    -   What data structure the vector_cols variable represents?\n\n-   Display the first few rows of the covid_df dataset using the function head()\n\n-   Display the summary of the covid_df dataset using the function glimpse() from the tibble package.\n\n    -   Why is the glimpse() function useful when exploring a new dataset?\n\n```{r}\n#| echo: true\n\n# dataframe dimensions\ndim(ds)\n\n# column names\nvector_cols <- colnames(ds)\nvector_cols\n```\n\nDisplaying first ten six rows\n\n```{r}\n#| echo: true\n\nknitr::kable(head(ds,6))\n```\n\nThe dataset structure\n\n```{r}\n#| echo: true\n#| output: true\nglimpse(ds)\n```\n\nSince Province_state contains multiple levels of data, extract only the country-level data in order to not bias our analyses. To do so, we filter the data to keep only the data related to \"All States\". \"All States\" represents the value of the column Province_State to specify that the COVID-19 data is only available at the country level. Feel free at the end of the project to come back to this step and do different kind of filtering, e.g., focus only on a country.\n\n## Task Two\n\n-   Filter the rows related to \"All States\" from the Province_State column and remove the Province_State column from covid_df dataframe.\n    -   Store the result in df\n-   Why can we remove the Province_State column without losing information from our dataset?\n\n```{r}\n#| echo: true\n\ndf <- ds %>%\n  filter(Province_State %in% \"All States\") %>%\n  select(-Province_State)\ndim(df)\n```\n\nRevisiting the description of the dataset columns above (not on the days), we can notice that there are columns that provide daily information and others that provide cumulative information.\n\nWe should manage those cases (columns with cumulative and daily information) separately because we cannot work with both together. Actually, our analysis would be biased if we made the mistake of comparing a column containing cumulative data and another one containing only one-day data. This is another example of a situation that we want to know from the beginning of the project in order to better analyze our dataset.\n\n## Task Three\n\n-   Select the following column, related to the daily measures, from the covid_df_all_states: Date, Country_Region, active, hospitalizedCurr, daily_tested, daily_positive.\n    -   Store the result in covid_df_all_states_daily.\n\n```{r}\n#| echo: true\n\ncovid_df_all_states_daily <- df %>%\n  select(Date, Country_Region, active, hospitalizedCurr, daily_tested, daily_positive)\n\n```\n\nOur goal here is to extract the top ten cases countries data. Acting like a data scientist, at this step, these are the questions we are asking ourselves.\n\n-   How can we get the overall number of COVID-19 tested, positive, active and hospitalized cases by country since we currently have daily data?\n-   How do we then extract the top ten?\n\n## Task Four\n\n-   Write code to summarize the covid_df_all_states_daily dataframe by computing the sum of the number of tested, positive, active and hospitalized cases grouped by the Country_Region column.\n\n    -   Use the function `group_by()` to group rows by Country_Region column.\n\n    -   Combine the function `summarize()` and the function `sum()` to compute the sum for each column.\n\n        -   Assign the sum of daily_tested to the column name tested.\n        -   Assign the sum of daily_positive to the column name positive.\n        -   Assign the sum of active to the column name active.\n        -   Assign the sum of hospitalizedCurr to the column name hospitalized.\n        -   Arrange the tested column in descending order using the function `arrange()`.\n\n-   Store the result in the variable covid_df_all_states_daily_sum.\n\n-   Display this dataframe.\n\n-   Extract the top ten rows from the covid_df_all_states_daily_sum dataframe using the command head(covid_df_all_states_daily_sum, 10)\n\n-   Store the result in the variable named covid_top_10.\n\n```{r}\n#| echo: true\n\ncovid_df_all_states_daily_sum <- covid_df_all_states_daily %>%\n  group_by(Country_Region) %>%\n  summarise(tested=sum(daily_tested),\n            positive=sum(daily_positive),\n            active=sum(active),\n            hospitalized=sum(hospitalizedCurr)) %>%\n  arrange(desc(tested))\n\ncovid_top_10 <- head(covid_df_all_states_daily_sum, 10)\n\nknitr::kable(covid_top_10)\n```\n\n## Task Five\n\n-   Create the following vectors from the `covid_top_10` dataframe.\n\n-   Create the countries vector that contains the `Country_Region` column values. We can use `covid_top_10$Country_Region` to extract this column from the `covid_top_10` dataframe.\n\n-   Create the `tested_cases` vector that contains the tested column values.\n\n-   Create the `positive_cases` vector that contains the positive column values.\n\n-   Create the `active_cases` vector that contains the active column values.\n\n-   Create the `hospitalized_cases` vector that contains the hospitalized column values.\n\n-   Write code to name the previous vectors: `tested_cases`, `positive_cases`, `active_cases`, and `hospitalized_cases` with the country names' vector countries using the function `names()`.\n\nIdentify the top three positive against tested cases.\n\n-   Divide the vector `positive_cases` by the vector tested_cases using the operator /.\n-   Identify the top three ratio. You can do this operation manually by looking at the result of the division.\n-   Store the result as the named vector, `positive_tested_top_3`, where each country name is associated with its ratio.\n\n```{r}\n#| echo: true\n\ncountries <- covid_top_10 %>%\n  pull(Country_Region)\n\ntested_cases <- covid_top_10 %>%\n  pull(tested)\n\npositive_cases <- covid_top_10 %>%\n  pull(positive)\n\nactive_cases <- covid_top_10 %>%\n  pull(active)\n\nhospitalized_cases <- covid_top_10 %>%\n  pull(hospitalized)\n```\n\nNaming the vectors\n\n```{r}\nnames(positive_cases) <- countries\nnames(tested_cases) <- countries\nnames(active_cases) <- countries\nnames(hospitalized_cases) <- countries\n\n# Example\n\npositive_cases\n```\n\nIdentifying top three active\n\n```{r}\nratio <- positive_cases/tested_cases\n\nsummary(ratio)\n\npositive_tested_top3 <- ratio [ratio > quantile(ratio,0.75)]\n\npositive_tested_top3\n```\n\nCreating a matrix containing top three countries\n\n```{r}\ntop_3 <- c(\"United States\", \"Turkey\", \"United Kingdom\")\n\ncovid_mat <- covid_top_10 %>%\n   mutate(ratio = round(positive_cases/tested_cases,2)) %>%\n   filter(Country_Region %in% top_3) \n \nknitr::kable(covid_mat, caption = \"Top Three Countries with High Testing Rate\")\n```\n\nOur goal is to put all our answers and datasets together. Since a list can contain several types of objects, we are able to store all the data of our project together. This allows us to have a global view from a single variable and the ability to export our results for other uses.\n\nOn the previous steps we answered the following questions:\n\n1.  Which countries have had the highest number of deaths due to COVID-19?\n\n2.  Which countries have had the highest number of positive cases against the number of tests?\n\nOur answers are stored in the variables positive_tested_top_3.\n\nTo do so, we created several data structures such as:\n\n-   Dataframes: covid_df, covid_df_all_states, covid_df_all_states_daily, and covid_top_10.\n-   Matrix: covid_mat.\n-   Vectors: vector_cols and countries.\n\nLet's create a list to store all our work in the same variable.\n\n## Task Six\n\nCreate a character variable named question that contains our question.\n\n-   question \\<- \"Which countries have had the highest number of positive cases against the number of tests?\"\n\nCreate a named vector that contains our answer with the following command:\n\n-   answer \\<- c(\"Positive tested cases\" = positive_tested_top_3).\n\nCreate a list that contains the data structures mentioned above.\n\n-   Create a list that contains the dataframes.\n-   Create a list that contains the matrices.\n-   Create a list that contains the vectors.\n-   Create a named list that contains the three previous lists associated with the data structure names.\n-   Store the result in data_structure_list.\n\nCreate a list that contains the following lists: question, answer, and data_structure_list.\n\n-   Store the result in covid_analysis_list.\n-   Display the second element of this list.\n\n```{r}\n#| echo: true\n\nquestion <- \"Which countries have had the highest number of positive cases against the number of tests?\"\nanswer <- c(\"Positive tested cases\" = positive_tested_top3)\n\ndataframes <- list( df, covid_df_all_states_daily,covid_df_all_states_daily_sum,covid_top_10)\n\nmatrix <- list(covid_mat)\n\nvectors <- list(vector_cols,countries)\n\ndata_structure_list<- list(dataframes,matrix,vectors)\n\ncovid_analysis_list <- list(question, answer, data_structure_list)\n\ncovid_analysis_list[2]\n```\n\n## Task Seven\n\nOur goal is to answer this question: Which countries have had the highest number of deaths due to COVID-19?.\n\nTo answer this question, we can use visualization, which allows exploring all the data at once in order to have a global view of the data that is needed to answer the question.\n\nWe will visualize the maximum number of deaths per country to identify the top three affected countries. We will use the dataset with the cumulative information, `covid_df_all_states_cumulative`\n\nSelect the following columns, related to the cumulative measures, from the covid_df_all_states dataframe: `Date`, `Continent_Name`, `Two_Letter_Country_Code`, `positive`, `hospitalized`, `recovered`, `death`, and `total_tested`.\n\nStore the result in `covid_df_all_states_cumulative`.\n\n```{r}\n#| echo: true\n\ncovid_df_all_states_cumulative <- df %>%\n  select(Date,Continent_Name,Two_Letter_Country_Code,positive, hospitalized,recovered, death, total_tested)\n```\n\nWrite code to summarize the `covid_df_all_states_cumulative` dataframe by computing the maximum of the death column grouped by `Continent_Name` and `Two_Letter_Country_Code` columns.\n\n-   Use the function `group_by()` to group row by Continent_Name and Two_Letter_Country_Code columns.\n-   Combine the function `summarize()` and the function `max()` to compute the maximum for each group.\n-   Filter the maximum value greater than 0 (`filter(max > 0)`).\n-   Store the result in the variable covid_df_all_states_cumulative_max.\n-   Display this dataframe.\n\nUse the `qplot()` function of the ggplot2 package to visualize the maximum death for each country.\n\n-   The x-axis parameter x receives the column named Two_Letter_Country_Code.\n-   The y-axis parameter y receives the maximum death column computed in the previous question.\\\n-   The color parameter receives the column named Continent_Name.\n-   The data parameter data receives the dataframe covid_df_all_states_cumulative_max.\n\nBy examining the plot, identify the top three affected countries\n\nStore your findings as a character vector named death_top_3.\n\n```{r}\n#| echo: true\n\ncovid_df_all_states_cumulative_max <- covid_df_all_states_cumulative %>%\n  group_by(Continent_Name, Two_Letter_Country_Code) %>%\n  summarize(maximum=max(death)) %>%\n  filter(maximum > 0)\n\nqplot(x = Two_Letter_Country_Code,\n      y = maximum,\n      color = Continent_Name,\n      data = covid_df_all_states_cumulative_max) +\n  theme_classic()\n\ndeath_top_3 <- c(\"Belgium\",\"United Kingdom\",\"Italy\")\n\n```\n\n## Task Eight\n\nCreate a matrix combining the ranking for every measurement in the matrix covid_top_10.\n\n-   Compute the ranking for the tested_cases column, using the function `rank()`, by indexing this column with its name \"tested_cases\". Store the result in the vector tested_cases_rank.\n-   Compute the ranking for the positive_cases column, using the function `rank()`, by indexing this column with its name \"positive_cases\". Store the result in the vector positive_cases_rank.\n-   Compute the ranking for the active_cases column, using the function `rank()`, by indexing this column with its name \"active_cases\". Store the result in the vector active_cases_rank.\n-   Compute the ranking for the hospitalized_cases column, using the function `rank()`, by indexing this column with its name \"hospitalized_cases\". Store the result in the vector hospitalized_cases_rank.\n\nUse the function `rbind()` to combine these rankings vectors. Store the result in the matrix covid_mat_rank.\n\n```{r}\npop <- c(331002651, 145934462, 60461826, 1380004385, 84339067, \n         37742154, 67886011, 25499884, 32971854, 37846611)\n\nco_top_10 <- covid_top_10 %>%\n  select(tested,positive,active,hospitalized) %>%\n  as.matrix() \n  \nco_top_10 <- (co_top_10 * 100)/pop \n\nco_top_10 <- as_tibble(co_top_10)\n\ntested_cases_rank <- co_top_10 %>%\n  pull(tested) %>%\n  rank()\n\npositive_cases_rank <- co_top_10 %>%\n  pull(positive) %>%\n  rank()\n\nactive_cases_rank <- co_top_10 %>%\n  pull(active) %>%\n  rank()\n\nhospitalized_cases_rank <- co_top_10 %>%\n  pull(hospitalized) %>%\n  rank()\n\ncovid_mat_rank <- rbind(tested_cases_rank,positive_cases_rank,\n                        active_cases_rank,hospitalized_cases_rank)\n\ncolnames(covid_mat_rank) <- countries\n\nknitr::kable(covid_mat_rank)\n```\n\nOur goal is to answer these questions:\n\n-   Which countries have made the best effort in terms of the number of tests conducted related to their population?\n\n-   Which countries were ultimately the most and least affected related to their population\n\n-   Compute the aggregated rankings by summing the rows of the covid_mat_rank matrix.\n\n    -   Compute the sum of the remaining rows using the colSums() function.\n\n```{r}\n#| echo: true\n\ncovid_mat_rank %<>%\n  colSums()\ncovid_mat_rank\n\nbest_effort_tested_cased_top_3 <- c(\"Russia\",\"Italy\",\"United States\")\n  \nmost_affected_country <- c(\"Italy\")\n\nleast_affected_country <- c(\"Poland\")\n```\n\n## Questions Addressed\n\n1.  Which countries have had the highest number of deaths due to COVID-19?\n\n2.  Which countries have had the highest number of positive cases against the number of tests?\n\n3.  Which countries have made the best effort in terms of the number of COVID-19 tests conducted related to their population?\n\n4.  Which countries were ultimately the most and least affected related to their population?\n\n> Create a questions list having the above questions.\n\n```{r}\n#| echo: true\nquestion_list <- list(\"Which countries have had the highest number of deaths due to COVID-19?\",\n\"Which countries have had the highest number of positive cases against the number of tests?\",\n\"Which countries have made the best effort in terms of the number of COVID-19 tests conducted related to their population?\",\n\"Which countries were ultimately the most and least affected related to their population?\")\n\n```\n\nCreate a list that contains our answers with the following association:\n\n-   `\"Death\" = death_top_3`,\n\n-   `\"Positive tested cases\" = positive_tested_top_3,`\n\n-   `\"The best effort in test related to the population\" = best_effort_tested_cased_top_3`,\n\n-   `\"The most affected country related to its population\" = most_affected_country,`\n\n-   `\"The least affected country related to its population\" = least_affected_country`\n\n-   Store the result in `answer_list`\n\nDisplay this list.\n\n```{r}\n#| echo: true\n\nanswer_list <- list(\"Death\" = death_top_3,\n\"Positive tested cases\" = positive_tested_top3,\n\"The best effort in test related to the population\" = best_effort_tested_cased_top_3,\n\"The most affected country related to its population\" = most_affected_country,\n\"The least affected country related to its population\" = least_affected_country)\n\nanswer_list\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"output-file":"covid_trends.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.313","title":"Investigating COVID-19 Trends","author":"Castory Munishi","date":"09/24/2022","editor":"visual"},"extensions":{"book":{"multiFile":true}}}}}