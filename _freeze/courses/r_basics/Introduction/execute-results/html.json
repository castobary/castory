{
  "hash": "e720d39cff4d2c68421ba72604371a25",
  "result": {
    "markdown": "---\ntitle: \"Introduction to Programming in R\"\nauthor: \"Castory Munishi\"\ndate: 10/27/2020\nexecute: \n  echo: true\n  warning: false\nformat: revealjs\neditor: visual\n---\n\n\n\n\n## Table of Contents\n\n+ Learning Data Science\n+ Programming in R\n+ R syntax rules\n+ Exploring Data with R\n+ Programming with Variables\n+ Vectors : Storage for Multiple Values\n+ Operators\n\n\n## 01 Learning Data Science\n\n+ **Data science** is a \"concept to unify statistics, data analysis, machine learning and their related methods\" in order to \"understand and analyze actual phenomena\" with data.\n\n+ **Data science:** It's one of the most exciting and fastest-growing fields out there.\n\n+ **Data scientists** bring value to all kinds of businesses and organizations.\n\n+ Data science languages includes R, Python, Matlab, Julia and their libraries\n\n\n## 02.01 Programming in R\n\n- R is a programming language and software environment for statistical analysis, graphics representation and reporting.\n\n+ R was created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand.R made its first appearance in 1993.\n\n\n## 02.02 Features of R\n\n+ R is a well-developed, simple and effective programming language which includes conditionals, loops, user defined recursive functions and input and output facilities.\n\n+ R has an effective data handling and storage facility,\n\n+ R provides a suite of operators for calculations on arrays, lists, vectors and matrices.\n\n+ R provides a large, coherent and integrated collection of tools for data analysis.\n\n+ R provides graphical facilities for data analysis and display either directly at the computer or printing at the papers.\n\n## 02.03 R Workflow and Packages\n\n+ A workflow of data manipulation in R and required packages.\n\n![\"The R Workflow\"](tidyverse.jpg)\n\n\n## 03.01 R Syntax Rules\n\n+ R follows the order of operations in mathematics. Syntax rules that govern the arrangement of symbols, words, and phrases. Sample code showing R performing simple mathematical calculations.\n\n::: {.cell}\n\n```{.r .cell-code}\n145 + 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 150\n```\n:::\n\n```{.r .cell-code}\n125 - 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 122\n```\n:::\n\n```{.r .cell-code}\n167 * 8\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1336\n```\n:::\n\n```{.r .cell-code}\n555/5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 111\n```\n:::\n\n```{.r .cell-code}\n(67 + 45)/9 * 45 + 28\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 588\n```\n:::\n:::\n\n\n## 03.02 Exercise\n\nWrite code to instruct R to perform the following computations:\n\n+ 224 + 667\n+ 35 / 7\n+ (22 * 5) + 3\n\n\n## 04.01 R Data Types\n\n+ Variables are reserved memory locations to store values. \n+ Variables store information of various data types like character, wide character, integer, floating point, double floating point, Boolean etc.\n+ Frequently used R objects:\n\n    + Vectors\n    + Lists\n    + Matrices\n    + Arrays\n    + Factors\n    + Data Frames\n    \n## 04.02.01 Data Types Looked Close\n\n### Logical\n\n+ Example : TRUE, FALSE\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- TRUE \nprint(class(v))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(v)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n\n### Numeric\n\nNumeric data may include integer data, or whole numbers (88), and double data, or decimals (87.666667).\n\n+ Example : 12.3, 5, 999\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- 23.5\nprint(class(v))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\n### Integer\n\n+ Example : 2L, 34L, 0L\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- 2L\nprint(class(v))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n\n## 04.02.02 Data Types Looked Close\n\n### Complex\n\nExample: 3 + 2i\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- 2+5i\nprint(class(v))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"complex\"\n```\n:::\n:::\n\n\n### Characters\n\nExample : 'a' , '\"good\", \"TRUE\", '23.4'\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- \"TRUE\"\nprint(class(v))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n### Raw\n\nExample : \"Hello\" is stored as 48 65 6c 6c 6f\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- charToRaw(\"Hello\")\nprint(class(v))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"raw\"\n```\n:::\n:::\n\n\n\n## 04.03 Vectors\n\nWhen you want to create vector with more than one element, you should use `c()` function which means to combine the elements into a vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector.\napple <- c('red','green',\"yellow\")\nprint(apple)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"red\"    \"green\"  \"yellow\"\n```\n:::\n\n```{.r .cell-code}\n# Get the class of the vector.\nprint(class(apple))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n\n## 04.04 Lists\n\nA list is an R-object which can contain many different types of elements inside it like vectors, functions and even another list inside it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a list.\nlist1 <- list(c(2,5,3),21.3,sin)\n\n# Print the list.\nprint(list1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 2 5 3\n\n[[2]]\n[1] 21.3\n\n[[3]]\nfunction (x)  .Primitive(\"sin\")\n```\n:::\n:::\n\n\n## 04.05 Matrices\n\nA matrix is a two-dimensional rectangular data set. It can be created using a vector input to the matrix function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a matrix.\nM = matrix( c('a','a','b','c','b','a'),\n            nrow = 2, ncol = 3, byrow = TRUE)\nprint(M)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,] \"a\"  \"a\"  \"b\" \n[2,] \"c\"  \"b\"  \"a\" \n```\n:::\n:::\n\n\n\n## 04.06 Arrays\n\nWhile matrices are confined to two dimensions, arrays can be of any number of dimensions. \nThe array function takes a dim attribute which creates the required number of dimension. \nIn the next example we create an array with two elements which are 3x3 matrices each.\n\n\n## Array Example\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an array.\na <- array(c('green','yellow'),dim = c(3,3,2))\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1\n\n     [,1]     [,2]     [,3]    \n[1,] \"green\"  \"yellow\" \"green\" \n[2,] \"yellow\" \"green\"  \"yellow\"\n[3,] \"green\"  \"yellow\" \"green\" \n\n, , 2\n\n     [,1]     [,2]     [,3]    \n[1,] \"yellow\" \"green\"  \"yellow\"\n[2,] \"green\"  \"yellow\" \"green\" \n[3,] \"yellow\" \"green\"  \"yellow\"\n```\n:::\n:::\n\n\n## 04.07 Factors\n\n+ Factors are the r-objects which are created using a vector. It stores the vector along with the distinct values of the elements in the vector as labels. \n+ The labels are always character irrespective of whether it is numeric or character or Boolean etc. in the input vector. They are useful in statistical modeling.\n\n+ Factors are created using the `factor()` function. The nlevels functions gives the count of levels.\n\n## Factors Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector.\napple_colors <- c('green','green','yellow','red','red','red','green')\n\n# Create a factor object.\nfactor_apple <- factor(apple_colors)\n\n# Print the factor.\nprint(factor_apple)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] green  green  yellow red    red    red    green \nLevels: green red yellow\n```\n:::\n\n```{.r .cell-code}\nprint(nlevels(factor_apple))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n\n## 04.08 Dataframes\n\n+ Data frames are tabular data objects. Unlike a matrix in data frame each column can contain different modes of data. \n+ The first column can be numeric while the second column can be character and third column can be logical. It is a list of vectors of equal length.\n\n+ Data Frames are created using the `data.frame()` function.\n\n## Dataframe Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the data frame.\nBMI <- \tdata.frame(\n   gender = c(\"Male\", \"Male\",\"Female\"), \n   height = c(152, 171.5, 165), \n   weight = c(81,93, 78),\n   Age = c(42,38,26)\n)\nprint(BMI)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  gender height weight Age\n1   Male  152.0     81  42\n2   Male  171.5     93  38\n3 Female  165.0     78  26\n```\n:::\n:::\n\n\n## 05.01 Assign Values to Variables\n\nCreating variables requires two steps:\n\n+ Create the variable name\n+ Assign values to the variable name using the assignment operator `<-`\n\n## 05.02 Naming Variables\n\nWhen naming variables in R, there are some rules to follow:\n\n+ Variable names consists of letters, numbers, a dot, or an underscore.\n+ We can begin a variable name with a letter or a dot, but dots cannot be followed by a number.\n+ We cannot begin a variable name with a number.\n+ No special characters are allowed.\n\n## 05.03 Variable Names\n\n| Variable Name      | Validity | Reason                                                                    |\n|--------------------|----------|---------------------------------------------------------------------------|\n| var_name2.         | valid    | Has letters, numbers, dot and underscore                                  |\n| var_name%          | Invalid  | Has the character '%'. Only dot(.) and underscore allowed.                |\n| 2var_name          | invalid  | Starts with a number                                                      |\n| .var_name,var.name | var.name | Can start with a dot(.) but the dot(.)should not be followed by a number. |\n| .2var_name         | invalid  | The starting dot is followed by a number making it invalid.               |\n| _var_name          | invalid  | Starts with _ which is not valid                                          \n\n## 05.04 Variable Assignment\n\nThe variables can be assigned values using leftward, rightward and equal to operator. The values of the variables can be printed using `print()` or `cat()` function. The `cat()` function combines multiple items into a continuous print output.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assignment using equal operator.\nvar.1 = c(0,1,2,3)           \n\n# Assignment using leftward operator.\nvar.2 <- c(\"learn\",\"R\")   \n\n# Assignment using rightward operator.   \nc(TRUE,1) -> var.3           \n\nprint(var.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1 2 3\n```\n:::\n\n```{.r .cell-code}\ncat (\"var.1 is \", var.1 ,\"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nvar.1 is  0 1 2 3 \n```\n:::\n\n```{.r .cell-code}\ncat (\"var.2 is \", var.2 ,\"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nvar.2 is  learn R \n```\n:::\n\n```{.r .cell-code}\ncat (\"var.3 is \", var.3 ,\"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nvar.3 is  1 1 \n```\n:::\n:::\n\n\n## Task\n\nGiven The Table\n\n| Class              | Exams | Homework | Projects |\n|--------------------|-------|----------|----------|\n| Math               | 92    | 87       | 85       |\n| Chemistry          | 90    | 81       | 92       |\n| Writing            | 84    | 95       | 79       |\n| Art                | 95    | 86       | 93       |\n| History            | 77    | 85       | 90       |\n| Music              | 92    | 90       | 91       |\n| Physical Education | 85    | 88       | 95       |\n\n## Instructions\n\n+ Refer to the table of class data to calculate your final grade in each of your classes:\n\n    + Chemistry\n    + Writing\n    + Art\n    + History\n    + Music\n    + Physical Education\n\n+ Store the results of your analysis into variables and combine them to a variable final_scores\n+ Using Variables Calculate gpa ( gpa = final_grades/7)\n \n## Goodness of Vectors\n\n+ Use the `mean()` function to calculate your grade point average from the final_scores vector that we created earlier. Store the result of your calculation in the variable gpa.\n\n+ Use the `max()` function to identify the highest final grade in the final_scores vector.\n+ Use the `min()` function to identify the lowest final grade in the final_scores vector.\n+ Use the `length()` function to calculate the total number of classes.\n\n## 06. Operators\n\n\nAn operator is a symbol that tells the compiler to perform specific mathematical or logical manipulations. R language is rich in built-in operators and provides following types of operators.\n\n### Types of Operators\nWe have the following types of operators in R programming −\n\n+ Arithmetic Operators\n+ Relational Operators\n+ Logical Operators\n+ Assignment Operators\n+ Miscellaneous Operators\n\n## Arithmetic Operators \n\n `+` Adds two vectors\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c( 2,5.5,6)\nt <- c(8, 3, 4)\nprint(v+t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10.0  8.5 10.0\n```\n:::\n:::\n\n\n `-` Subtracts second vector from the first\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c( 2,5.5,6)\nt <- c(8, 3, 4)\nprint(v-t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -6.0  2.5  2.0\n```\n:::\n:::\n\n\n## Arithmetic Operators\n\n `*` Multiplies both vectors\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c( 2,5.5,6)\nt <- c(8, 3, 4)\nprint(v*t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16.0 16.5 24.0\n```\n:::\n:::\n\n\n `/` Divide the first vector with the second\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c( 2,5.5,6)\nt <- c(8, 3, 4)\nprint(v/t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.250000 1.833333 1.500000\n```\n:::\n:::\n\n\n## Arithmetic Operators\n\n `%%` Give the remainder of the first vector with the second\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c( 2,5.5,6)\nt <- c(8, 3, 4)\nprint(v%%t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.0 2.5 2.0\n```\n:::\n:::\n\n\n `%/%` The result of division of first vector with second (quotient)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c( 2,5.5,6)\nt <- c(8, 3, 4)\nprint(v%/%t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1 1\n```\n:::\n:::\n\n\n## Arithmetic Operators\n\n`^` The first vector raised to the exponent of second vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c( 2,5.5,6)\nt <- c(8, 3, 4)\nprint(v^t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  256.000  166.375 1296.000\n```\n:::\n:::\n\n\n## Relational Operators\n\nEach element of the first vector is compared with the corresponding element of the second vector. The result of comparison is a Boolean value.\n\n### 1. Greater Than `(>)`\n\nChecks if each element of the first vector is greater than the corresponding element of the second vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c(2,5.5,6,9)\nt <- c(8,2.5,14,9)\nprint(v>t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE FALSE FALSE\n```\n:::\n:::\n\n\n## 2. Less than `(<)`\n\nChecks if each element of the first vector is less than the corresponding element of the second vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c(2,5.5,6,9)\nt <- c(8,2.5,14,9)\nprint(v < t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE FALSE\n```\n:::\n:::\n\n\n## 3. Equality `(==)`\n\nChecks if each element of the first vector is equal to the corresponding element of the second vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c(2,5.5,6,9)\nt <- c(8,2.5,14,9)\nprint(v == t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE  TRUE\n```\n:::\n:::\n\n\n## 4. Less equal `(<=)`\n\nChecks if each element of the first vector is less than or equal to the corresponding element of the second vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c(2,5.5,6,9)\nt <- c(8,2.5,14,9)\nprint(v<=t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE  TRUE\n```\n:::\n:::\n\n## 5. Greater Equal `(>=)`\nChecks if each element of the first vector is greater than or equal to the corresponding element of the second vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c(2,5.5,6,9)\nt <- c(8,2.5,14,9)\nprint(v>=t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE FALSE  TRUE\n```\n:::\n:::\n\n\n## 6. Not Equal `(!=)`\n\nChecks if each element of the first vector is unequal to the corresponding element of the second vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c(2,5.5,6,9)\nt <- c(8,2.5,14,9)\nprint(v!=t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE  TRUE FALSE\n```\n:::\n:::\n\n\n## Logical Operators\n\nIt is applicable only to vectors of type logical, numeric or complex. All numbers greater than 1 are considered as logical value TRUE.\n\nEach element of the first vector is compared with the corresponding element of the second vector. The result of comparison is a Boolean value.\n\n\n## Element Wise Logical AND `(&)`\n\nIt combines each element of the first vector with the corresponding element of the second vector and gives a output TRUE if both the elements are TRUE.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c(3,1,TRUE,2+3i)\nt <- c(4,1,FALSE,2+3i)\nprint(v&t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE  TRUE\n```\n:::\n:::\n\n\n\n\n## Element Wise Logical OR `(|)`\n\nIt combines each element of the first vector with the corresponding element of the second vector and gives a output TRUE if one the elements is TRUE.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c(3,0,TRUE,2+2i)\nt <- c(4,0,FALSE,2+3i)\nprint(v|t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE  TRUE\n```\n:::\n:::\n\n\n## Logical NOT `(!)`\n\nTakes each element of the vector and gives the opposite logical value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c(3,0,TRUE,2+2i)\nprint(!v)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE FALSE FALSE\n```\n:::\n:::\n\n\nThe logical operator && and || considers only the first element of the vectors and give a vector of single element as output.\n\n## Logical AND `(&&)`\n\nTakes first element of both the vectors and gives the TRUE only if both are TRUE.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c(3,0,TRUE,2+2i)\nt <- c(1,3,TRUE,2+3i)\nprint(v&&t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Logical OR `(||)`\n\n Takes first element of both the vectors and gives the TRUE if one of them is TRUE\n \n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c(0,0,TRUE,2+2i)\nt <- c(0,3,TRUE,2+3i)\nprint(v||t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n## Miscelleneous Operators\n\nThese operators are used to for specific purpose and not general mathematical or logical computation.\n\n### Colon Operator `(:)`\n\nIt creates the series of numbers in sequence for a vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- 2:8\nprint(v) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 4 5 6 7 8\n```\n:::\n:::\n\n\n## %in%\n\nThis operator is used to identify if an element belongs to a vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 <- 8\nv2 <- 12\nt <- 1:10\nprint(v1 %in% t) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nprint(v2 %in% t) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n## %*%\n\nThis operator is used to multiply a matrix with its transpose\n\n\n::: {.cell}\n\n```{.r .cell-code}\nM = matrix( c(2,6,5,1,10,4), nrow = 2,ncol = 3,byrow = TRUE)\nt = M %*% t(M)\nprint(t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]   65   82\n[2,]   82  117\n```\n:::\n:::\n\n\n\n## Decision Making\n\nDecision making structures require the programmer to specify one or more conditions to be evaluated or tested by the program, along with a statement or statements to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.\n\n![](images/decision.png)\n\n\n## If statement\n\nAn if statement consists of a Boolean expression followed by one or more statements.\n\nFlow Diagram\n\n![](images/if.png)\n\n## If statement : Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 30L\nif(is.integer(x)) {\n   print(\"X is an Integer\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"X is an Integer\"\n```\n:::\n:::\n\n\n\n## If ... else statement\n\nAn if statement can be followed by an optional else statement, which executes when the Boolean expression is false.\n\nFlow Diagram\n\n![](images/else.png)\n## Example:\n\n### if ... else statement\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"what\",\"is\",\"truth\")\n\nif(\"Truth\" %in% x) {\n   print(\"Truth is found\")\n} else {\n   print(\"Truth is not found\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Truth is not found\"\n```\n:::\n:::\n\n\n### The if...else if...else Statement\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"what\",\"is\",\"truth\")\n\nif(\"Truth\" %in% x) {\n   print(\"Truth is found the first time\")\n} else if (\"truth\" %in% x) {\n   print(\"truth is found the second time\")\n} else {\n   print(\"No truth found\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"truth is found the second time\"\n```\n:::\n:::\n\n\n\n## Switch statement\n\nA switch statement allows a variable to be tested for equality against a list of values.\n\nFlow Diagram\n\n![](images/switch.png)\n\n## Example : Switch\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- switch(\n   3,\n   \"first\",\n   \"second\",\n   \"third\",\n   \"fourth\"\n)\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"third\"\n```\n:::\n:::\n\n\n## Loops\n\nA loop statement allows us to execute a statement or group of statements multiple times and the following is the general form of a loop statement in most of the programming languages −\n\n![](images/loops.png)\n\n\n## Repeat Loop\n\nExecutes a sequence of statements multiple times and abbreviates the code that manages the loop variable.\nFlow Diagram\n\n![](images/repeat.png)\n\n\n## Example : Repeat Loop\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c(\"Hello\",\"loop\")\ncnt <- 2\n\nrepeat {\n   print(v)\n   cnt <- cnt+1\n   \n   if(cnt > 5) {\n      break\n   }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello\" \"loop\" \n[1] \"Hello\" \"loop\" \n[1] \"Hello\" \"loop\" \n[1] \"Hello\" \"loop\" \n```\n:::\n:::\n\n\n\n## while loop\n\nRepeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.\n\nFlow Diagram\n\n![](images/while.png)\n\n## Example : While Loop\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c(\"Hello\",\"while loop\")\ncnt <- 2\n\nwhile (cnt < 7) {\n   print(v)\n   cnt = cnt + 1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello\"      \"while loop\"\n[1] \"Hello\"      \"while loop\"\n[1] \"Hello\"      \"while loop\"\n[1] \"Hello\"      \"while loop\"\n[1] \"Hello\"      \"while loop\"\n```\n:::\n:::\n\n\n## for loop\n\nLike a while statement, except that it tests the condition at the end of the loop body.\n\nFlow Diagram\n\n![](images/for.png)\n\n\n## Loop control statements\n\nLoop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.\n\n### break statement\nTerminates the loop statement and transfers execution to the statement immediately following the loop.\n\n### Next statement\nThe next statement simulates the behavior of R switch.\n\n## Next Statement\nFlow Diagram\n\n![](images/next.png)\n\n## Next: Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- LETTERS[1:6]\nfor ( i in v) {\n   \n   if (i == \"D\") {\n      next\n   }\n   print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A\"\n[1] \"B\"\n[1] \"C\"\n[1] \"E\"\n[1] \"F\"\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}