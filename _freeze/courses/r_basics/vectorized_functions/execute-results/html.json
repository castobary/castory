{
  "hash": "3a20ff49f58786d401717a3e3a3222e0",
  "result": {
    "markdown": "---\ntitle: \"Working with Vectorized Functions\"\nauthor: \"Castory Munishi\"\ndate: 10/28/2020\nexecute: \n  echo: true\n  warning: false\nformat: revealjs\neditor: visual\n---\n\n\n\n\n## R Functions As Alternatives To Loops\n\n+ In R, many built-in functions contain for-loops. \n\n+ This makes it possible to call a function instead of directly using a for-loop\n\n+ Functions take an input, perform an operation, and return an output.\n\n+ Many R functions are vectorized, meaning you can use them to operate on all elements of a vector quickly\n\n\n::: {.cell}\n\n:::\n\n\n## How does vectorization makes code faster\n\n+ If you apply a function to each element of the vector repeatedly,  R has to interpret the input of the function and pass it to the compiled code for each element\n\n+ If you apply the function to the entire vector, R only needs to interpret the input and pass it to the compiled code once.\n\n+  Therefore, the vectorized solution is faster, and the code is usually easier to understand.\n\n##  Comparison of vectorized and non vectorized method\n\n+ Let's calculate the sum of all the numbers from zero to 100,000,000 using non-vectorized and vectorized methods and compare the amount of time it takes the R interpreter to run the code for each.\n\n+ We will measure the running time of the code using the function `system.time()`, which outputs the time elapsed (in seconds) while the function is executed.\n\n## Calculating using a non vectorized method (for loop)\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n   user  system elapsed \n   0.00    0.00    0.03 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 500000500000\n```\n:::\n:::\n\n\n\n## Performing the calculating using a function (vectorized method)\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n   user  system elapsed \n      0       0       0 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 500000500000\n```\n:::\n:::\n\n\n+ Using the `sum()` function is substantially faster than using the for-loop.\n\n## A vectorized function for if-else statement\n\n+ The __`if_else()`__ function is part of the dplyr package and requires the following input:\n    \n    1.A vector or multiple vectors\n    \n    2.A condition\n    \n    3.An action to perform if the condition is true\n    \n    4.An action to perform if the condition is false\n    \n## Code and it replacement\n\n\n::: {.cell}\n\n:::\n\n\n+ Vectorized uses __`if_else()`__\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"home team won\"         \"home team won\"         \"home team did not win\"\n [4] \"home team won\"         \"home team won\"         \"home team won\"        \n [7] \"home team did not win\" \"home team did not win\" \"home team won\"        \n[10] \"home team won\"         \"home team won\"         \"home team did not win\"\n[13] \"home team won\"         \"home team did not win\" \"home team won\"        \n[16] \"home team did not win\" \"home team did not win\" \"home team did not win\"\n[19] \"home team did not win\" \"home team did not win\" \"home team won\"        \n[22] \"home team did not win\" \"home team won\"         \"home team did not win\"\n[25] \"home team did not win\" \"home team did not win\" \"home team won\"        \n[28] \"home team won\"         \"home team did not win\" \"home team did not win\"\n[31] \"home team won\"         \"home team did not win\" \"home team did not win\"\n[34] \"home team did not win\" \"home team did not win\" \"home team won\"        \n[37] \"home team did not win\" \"home team won\"         \"home team did not win\"\n[40] \"home team did not win\" \"home team did not win\" \"home team did not win\"\n[43] \"home team did not win\" \"home team won\"         \"home team did not win\"\n[46] \"home team won\"         \"home team did not win\" \"home team did not win\"\n[49] \"home team did not win\" \"home team won\"         \"home team won\"        \n[52] \"home team did not win\" \"home team won\"         \"home team won\"        \n[55] \"home team won\"         \"home team won\"         \"home team won\"        \n[58] \"home team did not win\" \"home team did not win\" \"home team won\"        \n[61] \"home team did not win\" \"home team did not win\" \"home team did not win\"\n[64] \"home team won\"        \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}