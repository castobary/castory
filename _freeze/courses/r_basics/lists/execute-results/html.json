{
  "hash": "c0d6fad9e6fb016f88e27b692aec0e9c",
  "result": {
    "markdown": "---\ntitle: \"Working with Lists\"\nauthor: \"Castory Munishi\"\ndate: 10/21/2023\nexecute: \n  echo: true\n  warning: false\nformat: revealjs\neditor: visual\n---\n\n\n\n\n## Lists\n\n+ Lists can contain multiple types of objects.\n\n+ The objects may consist of different data structures, including single data elements, vectors, and matrices.\n\n\n## Using Lists\n\n+ Why would we want to create lists of objects in R? \n\n+ Storing objects in lists allows us to make use of some very powerful R features.\n\n+ Allows performing the same operation on each object in your list hence avoiding repetitively typing the same function.\n\n+ Lists store information that is used to compose complex structures like plots. e.g ggplot objects\n\n## Creating lists\n\n+ Lists are created by using a simple function `list()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuni_clubs <- list('ballroom dancing','rugby','bird watching','pottery')\nuni_clubs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"ballroom dancing\"\n\n[[2]]\n[1] \"rugby\"\n\n[[3]]\n[1] \"bird watching\"\n\n[[4]]\n[1] \"pottery\"\n```\n:::\n:::\n\n\n## Entering Data into a List 1/2\n\n+ Data for chess club as an example\n\n+ The data is entered into a vector as shown :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclub_title <- c('chess club')\n\nclub_description <- c('Meets two nights a week for members to play chess. Snacks are provided.')\n\nclub_dues <- c(50,20,15)\n\nmeeting_days <- c('Monday','Wednesday')\n\nmeeting_times <- c('6:00pm','8:00 pm')\nclub_meetings <- rbind(meeting_days, meeting_times)\n```\n:::\n\n\n## Entering Data into a List 2/2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchess_club <- list(club_title,club_description,club_dues,club_meetings)\nchess_club\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"chess club\"\n\n[[2]]\n[1] \"Meets two nights a week for members to play chess. Snacks are provided.\"\n\n[[3]]\n[1] 50 20 15\n\n[[4]]\n              [,1]     [,2]       \nmeeting_days  \"Monday\" \"Wednesday\"\nmeeting_times \"6:00pm\" \"8:00 pm\"  \n```\n:::\n:::\n\n\n## Object Naming in List\n\n+ To specify names for list objects within the `list()` function, you can use `=`. \n+ For example, let's create a list containing data you've gathered about the rugby club:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrugby_club <- list (club_title=c('Rugby Club'),\n                    club_description=c('Plays matches against clubs from local universities'),\n                    club_dues=c(100,50))\nrugby_club\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$club_title\n[1] \"Rugby Club\"\n\n$club_description\n[1] \"Plays matches against clubs from local universities\"\n\n$club_dues\n[1] 100  50\n```\n:::\n:::\n\n\n## Assigning Names to Lists 1/2\n\n+ Assigning names to list objects is similar to assigning names to vector elements:\n+ We'll use the `names()` accessor function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nballroom_dancing <- list (c('Ballroom Dancing Club'),\n                          c('Practices waltz, salsa, and tango dancing for competitions with local university dance teams')\n,c(150))\n\nnames(ballroom_dancing) <- c('club_title','club_description','club_dues')\n```\n:::\n\n\n\n## Output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nballroom_dancing\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$club_title\n[1] \"Ballroom Dancing Club\"\n\n$club_description\n[1] \"Practices waltz, salsa, and tango dancing for competitions with local university dance teams\"\n\n$club_dues\n[1] 150\n```\n:::\n:::\n\n\n\n## Assigning Names to Lists 2/2\n\n+ Like vectors, if you call the `names()` function in a list without assigned names, the function will return NULL.\n\n+ Let's assign names to objects of the chess_club list that we created earlier.\n\n+ We have created a vector, chess_club_names, of names for the objects of the chess_club list. \n\n+ Use the `names()` function to assign the names as attributes to elements of the chess_club list.\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchess_club_names <- c('club_title','club_description',\n                      'club_dues','club_meetings')\nnames(chess_club) <- chess_club_names\nchess_club\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$club_title\n[1] \"chess club\"\n\n$club_description\n[1] \"Meets two nights a week for members to play chess. Snacks are provided.\"\n\n$club_dues\n[1] 50 20 15\n\n$club_meetings\n              [,1]     [,2]       \nmeeting_days  \"Monday\" \"Wednesday\"\nmeeting_times \"6:00pm\" \"8:00 pm\"  \n```\n:::\n:::\n\n\n## Indexing a List 1/5\n\n+ use two different indexing operations on lists:\n  \n 1. Single brackets to return a list of selected elements `([])`\n 2. Double brackets to return a single element `([[]])`\n \n + Example : Extracting the second element in Rugby Club\n \n\n::: {.cell}\n\n```{.r .cell-code}\nrugby_club[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$club_description\n[1] \"Plays matches against clubs from local universities\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(rugby_club[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n:::\n\n\n## Indexing a list 2/5\n\n+ Let's try performing this operation using double brackets:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrugby_club[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Plays matches against clubs from local universities\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(rugby_club[[2]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n\n## Indexing a list 3/5\n\n+ Like in vectors multiple elements can be extracted using `c()`\n\n+ Let's use single brackets to extract the first and third objects in the rugby_club list:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrugby_club[c(1,3)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$club_title\n[1] \"Rugby Club\"\n\n$club_dues\n[1] 100  50\n```\n:::\n:::\n\n\n\n## Indexing a list 4/5\n\n+ What happens if we use double brackets to index rugby_club?\n+ Now, the output consists of the first element in the third object of the list:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrugby_club[[c(3,1)]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n:::\n\n\n\n## Indexing a list 5/5 - Using names\n\n+ When objects in a list have names associated with them, you can use them for indexing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrugby_club$club_description\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Plays matches against clubs from local universities\"\n```\n:::\n\n```{.r .cell-code}\nrugby_club$club_dues[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n\n```{.r .cell-code}\nrugby_club[[3]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100  50\n```\n:::\n:::\n\n\n## Practice Indexing\n\n+ Write code to give the second element in chess club\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchess_club[[c(3,2)]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n:::\n\n\n## Modifying List Elements 1/3\n\n+  Addition to extracting elements, we can also index lists to change specific list components.\n\n+ For example, let's say you spoke with a new friend who is a member of the rugby club. \n\n+ She tells you that the club dues paid by members at the start of the fall and spring semesters have increased by 10 USD each.\n\n+ As a result, you'd like to change the values of club_dues you have stored in your rugby_club list.\n\n+  To replace the old values with new values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrugby_club$club_dues <- c(110,60,70,90)\n```\n:::\n\n\n\n## Output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrugby_club\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$club_title\n[1] \"Rugby Club\"\n\n$club_description\n[1] \"Plays matches against clubs from local universities\"\n\n$club_dues\n[1] 110  60  70  90\n```\n:::\n:::\n\n\n## Replacing Values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrugby_club[[c(3,1)]] <- 80\nrugby_club\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$club_title\n[1] \"Rugby Club\"\n\n$club_description\n[1] \"Plays matches against clubs from local universities\"\n\n$club_dues\n[1] 80 60 70 90\n```\n:::\n:::\n\n\n\n## Modifying List Elements 2/3\n\n+ Let's modify the chess_club list to reflect new information your research has turned up. \n\n+ Currently, chess club members pay dues during the fall semester (50 USD), spring semester (20 USD)\n\n+ During summer (15 USD) if they are staying on campus. Since few students stay on campus and snack costs are low, the club captain is reducing summer club dues to 5 USD.\n\n\n## Code and Output\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchess_club[[c(3,3)]] <- 5\nchess_club\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$club_title\n[1] \"chess club\"\n\n$club_description\n[1] \"Meets two nights a week for members to play chess. Snacks are provided.\"\n\n$club_dues\n[1] 50 20  5\n\n$club_meetings\n              [,1]     [,2]       \nmeeting_days  \"Monday\" \"Wednesday\"\nmeeting_times \"6:00pm\" \"8:00 pm\"  \n```\n:::\n:::\n\n\n## Adding Elements to Lists\n\n### Preparing the object to be added\n\n+ Adding members of different years to the matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfall <- c(8,12,13,2)\nspring <- c(6,11,14,3)\n\nmember_year_rugby <- rbind(spring, fall)\n\n\ncolnames(member_year_rugby) <-c('first_yr','second_yr',\n                                 'third_yr','fourth_yr')\nmember_year_rugby\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       first_yr second_yr third_yr fourth_yr\nspring        6        11       14         3\nfall          8        12       13         2\n```\n:::\n\n```{.r .cell-code}\nmean(member_year_rugby[,'first_yr'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n:::\n\n\n\n## Adding Elements to Lists\n\n### Adding the Object\n\n+ Let's add member_years_chess as a fourth object of the list. \n\n+ To add an element to a list,  we can specify the position we want the new element to occupy using double brackets:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrugby_club[[\"Member Year\"]] <- member_year_rugby\n```\n:::\n\n\n\n## Output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrugby_club\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$club_title\n[1] \"Rugby Club\"\n\n$club_description\n[1] \"Plays matches against clubs from local universities\"\n\n$club_dues\n[1] 80 60 70 90\n\n$`Member Year`\n       first_yr second_yr third_yr fourth_yr\nspring        6        11       14         3\nfall          8        12       13         2\n```\n:::\n:::\n\n\n\n## Adding Elements to Lists\n\n+ We've researched chess club membership and found the following  numbers of first-year members that joined during the spring and fall semesters last year:\n\n+ Fall Semester: 12 Spring Semester: 15\n\n+ Let's add this information to to our chess_club list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_years <- c(12,15)\nnames(first_years) <- c('spring','fall')\nfirst_years\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspring   fall \n    12     15 \n```\n:::\n\n```{.r .cell-code}\nchess_club[[\"first_years\"]] <- first_years\n```\n:::\n\n\n\n## Output\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchess_club\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$club_title\n[1] \"chess club\"\n\n$club_description\n[1] \"Meets two nights a week for members to play chess. Snacks are provided.\"\n\n$club_dues\n[1] 50 20  5\n\n$club_meetings\n              [,1]     [,2]       \nmeeting_days  \"Monday\" \"Wednesday\"\nmeeting_times \"6:00pm\" \"8:00 pm\"  \n\n$first_years\nspring   fall \n    12     15 \n```\n:::\n:::\n\n\n\n## Combining Lists 1/2\n\n+ Syntax for combining multiple lists is similar to that for combining vectors.\n+ To combine the rugby_club and ballroom_dancing lists into a new list called uni_club_data, \n+ we can use the `c()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuni_club_data <- c(rugby_club,ballroom_dancing)\nuni_club_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$club_title\n[1] \"Rugby Club\"\n\n$club_description\n[1] \"Plays matches against clubs from local universities\"\n\n$club_dues\n[1] 80 60 70 90\n\n$`Member Year`\n       first_yr second_yr third_yr fourth_yr\nspring        6        11       14         3\nfall          8        12       13         2\n\n$club_title\n[1] \"Ballroom Dancing Club\"\n\n$club_description\n[1] \"Practices waltz, salsa, and tango dancing for competitions with local university dance teams\"\n\n$club_dues\n[1] 150\n```\n:::\n:::\n\n\n## Combining Lists 2/2\n\n+ Combining lists using `c()` attaches lists to one another, end-to-end, to create a single list.We can use it to combine as many lists as we need to\n\n+ The uni_club_data list is confusing because some of the elements, like club_description, have the same name. \n\n+ We need a way to combine lists that preserves the organization of each list.\n\n+  Recall that lists can contain any type of data object, including other lists. \n+ Instead of combining elements of the three lists into a single list as you did using `c()`,  you can use `list()` to create a new list of lists.\n\n+ Let's create a list of lists, uni_club_list, to illustrate how this works.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuni_club_list <- list(rugby_club =rugby_club,\n                      ballroom_dancing = ballroom_dancing)\n```\n:::\n\n\n## Output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuni_club_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$rugby_club\n$rugby_club$club_title\n[1] \"Rugby Club\"\n\n$rugby_club$club_description\n[1] \"Plays matches against clubs from local universities\"\n\n$rugby_club$club_dues\n[1] 80 60 70 90\n\n$rugby_club$`Member Year`\n       first_yr second_yr third_yr fourth_yr\nspring        6        11       14         3\nfall          8        12       13         2\n\n\n$ballroom_dancing\n$ballroom_dancing$club_title\n[1] \"Ballroom Dancing Club\"\n\n$ballroom_dancing$club_description\n[1] \"Practices waltz, salsa, and tango dancing for competitions with local university dance teams\"\n\n$ballroom_dancing$club_dues\n[1] 150\n```\n:::\n:::\n\n\n## Final Assignment\n\n+ Create a new list, uni_clubs, that contains the following lists:\n \n   +  rugby_club\n   +  ballroom_dancing\n   + chess_club\n\n+ Instead of combining the list objects into a single list, create a list of lists by using the `list()` function.\n\n+  Write your code so that each list within uni_clubs is named. Keep the original list names.\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuni_clubs <-list( rugby_club =rugby_club, \n                  ballroom_dancing = ballroom_dancing, \n                  chess_club = chess_club)\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}