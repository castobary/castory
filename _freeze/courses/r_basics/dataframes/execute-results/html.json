{
  "hash": "7620e9a564d50f037a410fe3989f94d7",
  "result": {
    "markdown": "---\ntitle: \"Working with Dataframes\"\nauthor: \"Castory Munishi\"\ndate: 10/27/2020\nexecute: \n  echo: true\n  warning: false\nformat: revealjs\neditor: visual\n---\n\n\n## Data Frames\n\n+ The most common data structures involved in data analysis.\n\n+ Like lists, data frames can contain multiple data types. \n\n+ Unlike lists all elements of a data frame are vectors of equal length.\n\n+ The `read_csv()` from readr package is used to import csv data\n\n+ `str()` is used to display the internal structure of an R object\n\n\n::: {.cell paged.print='true'}\n\n```{.r .cell-code}\nlibrary(readr)\nrecent_grads <- read_csv(\"datasets/recent_grads.csv\")\n#str(recent_grads)\n```\n:::\n\n\n## Indexing Data Frames\n\n+ When we want to return a specific column, row, or value from a data frame, we can index them. \n \n+ The syntax for indexing data frames is very similar to that of matrices.\n \n+  Let's say we want to return the column of the data frame containing Major.\n\n+  We can perform this operation using several techniques.\n\n## Indexing by Position\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n recent_grads[,3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 1\n   Major                         \n   <chr>                         \n 1 PETROLEUM ENGINEERING         \n 2 MINING AND MINERAL ENGINEERING\n 3 METULLARGY ENGINEERING        \n 4 NAVAL                         \n 5 CHEMICAL ENGINEERING          \n 6 NUCLEAR                       \n 7 ACTUARIAL ENGINEERING         \n 8 ASTRONOMY                     \n 9 MECHANICAL ENGINEERING        \n10 ELECTRICAL ENGINEERING        \n```\n:::\n:::\n\n\n\n## Indexing by names\n\n\n::: {.cell}\n\n```{.r .cell-code}\n recent_grads[,'Major']\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 1\n   Major                         \n   <chr>                         \n 1 PETROLEUM ENGINEERING         \n 2 MINING AND MINERAL ENGINEERING\n 3 METULLARGY ENGINEERING        \n 4 NAVAL                         \n 5 CHEMICAL ENGINEERING          \n 6 NUCLEAR                       \n 7 ACTUARIAL ENGINEERING         \n 8 ASTRONOMY                     \n 9 MECHANICAL ENGINEERING        \n10 ELECTRICAL ENGINEERING        \n```\n:::\n:::\n\n\n\n## Using multiple columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecent_grads[,c('Major','Men','Women')]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n   Major                            Men Women\n   <chr>                          <dbl> <dbl>\n 1 PETROLEUM ENGINEERING           2057   282\n 2 MINING AND MINERAL ENGINEERING   679    77\n 3 METULLARGY ENGINEERING           725   131\n 4 NAVAL                           1123   135\n 5 CHEMICAL ENGINEERING           21239 11021\n 6 NUCLEAR                         2200   373\n 7 ACTUARIAL ENGINEERING           2110  1667\n 8 ASTRONOMY                        832   960\n 9 MECHANICAL ENGINEERING         80320 10907\n10 ELECTRICAL ENGINEERING         65511 16016\n```\n:::\n:::\n\n\n## Indexing using `$` symbol\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecent_grads$Total\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  2339   756   856  1258 32260  2573  3777  1792 91227 81527\n```\n:::\n:::\n\n\n\n## Indexing Rows\n\n+ Let's say that instead of a certain column, we want to extract a row of a data frame.\n\n+ To return the fifth row of the data frame, we could write \n\n\n::: {.cell}\n\n```{.r .cell-code}\n recent_grads[5,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 18\n   Rank Major_…¹ Major Total   Men Women Major…² Sampl…³ Emplo…⁴ Full_…⁵ Part_…⁶\n  <dbl>    <dbl> <chr> <dbl> <dbl> <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1     5     2405 CHEM… 32260 21239 11021 Engine…     289   25694   23170    5180\n# … with 7 more variables: Full_time_year_round <dbl>, Unemployed <dbl>,\n#   Unemployment_rate <dbl>, Median <dbl>, College_jobs <dbl>,\n#   Non_college_jobs <dbl>, Low_wage_jobs <dbl>, and abbreviated variable names\n#   ¹​Major_code, ²​Major_category, ³​Sample_size, ⁴​Employed, ⁵​Full_time,\n#   ⁶​Part_time\n```\n:::\n:::\n\n\n## Extracting a subset of values\n\n+ As with matrices, we can specify multiple elements to extract from a data frame.\n+  Let's extract the first ten rows of the Major and Major_category column \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecent_grads[c(1:10),c('Major','Major_category')]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   Major                          Major_category  \n   <chr>                          <chr>           \n 1 PETROLEUM ENGINEERING          Engineering     \n 2 MINING AND MINERAL ENGINEERING Engineering     \n 3 METULLARGY ENGINEERING         Engineering     \n 4 NAVAL                          Engineering     \n 5 CHEMICAL ENGINEERING           Engineering     \n 6 NUCLEAR                        Engineering     \n 7 ACTUARIAL ENGINEERING          Business        \n 8 ASTRONOMY                      Physical Science\n 9 MECHANICAL ENGINEERING         Engineering     \n10 ELECTRICAL ENGINEERING         Engineering     \n```\n:::\n:::\n\n\n## Extracting Rows and Saving into a dataframe\n\n+ Extract the first, third, and fifth rows of the Unemployment_rate column and save the output in a variable named unemployment_subset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunemployement_subset <- recent_grads$Unemployment_rate[c(1,3,5)]\nunemployement_subset\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.01838052 0.02409638 0.06109771\n```\n:::\n:::\n\n\n## Selecting Columns\n\n+ Our goal is choosing a college major\n\n+ Criteria for choosing a college major\n   \n   1.You're interested in the physical and life sciences.\n   \n   2.You'd like a decent salary. Recent graduates must have a median salary above 40,000 USD.\n   \n   3.You'd like to avoid male-dominated majors. More than 40 percent of graduates must be women.\n \n+ We will use the variables in the recent_grads dataframe to make the decesion\n\n## Using `dplyr` package in manipulating Data Frames\n\n+ Use the dplyr function `select()` to create a new data frame with only columns containing the variables we want to keep for our analysis.\n\n+ Using the `select()` function, we'll specify the data frame we want to work with and the columns we want to select\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nrecent_grads_select <- recent_grads %>%\n  select(Major, Total, Men, Women, Major_category)\n```\n:::\n\n\n## Output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(recent_grads_select,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 5\n  Major                          Total   Men Women Major_category\n  <chr>                          <dbl> <dbl> <dbl> <chr>         \n1 PETROLEUM ENGINEERING           2339  2057   282 Engineering   \n2 MINING AND MINERAL ENGINEERING   756   679    77 Engineering   \n3 METULLARGY ENGINEERING           856   725   131 Engineering   \n4 NAVAL                           1258  1123   135 Engineering   \n5 CHEMICAL ENGINEERING           32260 21239 11021 Engineering   \n```\n:::\n:::\n\n\n## The Pipe Operator\n\n+ Notice the `%>%` symbol: This is called the \"the pipe operator\" \n\n+ Its purpose is to help you write code that's easier to write, read, and understand. \n\n+ The pipe lets you write code that chains series of operations together; in the case of the code above\n\n+ We could read the code as, \"take the recent_grads data frame and select the Major, Total, Men, Women,  and Major_category columns.\"\n\n## Selecting the Right Columns\n\n+ Create a new data frame, recent_grads_select, that contains only the following variables from recent_grads:\n\n+  1. Major 2. Major_category 3.Total 4.Men 5.Women 6.Median 7.Unemployment_rate\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecent_grads_select <- recent_grads %>%\n  select(Major,Major_category,Men,Women,Total,Median,Unemployment_rate)\n\n#recent_grads_select\n```\n:::\n\n\n## Creating New Variables\n\n### The `mutate()` function\n\n+ We can use the mutate function to create a new column based on information contained in existing columns.\n\n+ The mutate function lets us specify the creation of a new column, as well as how the values contained in that new column are calculated:\n\n+  For example adding men percent in the dataset \n\n::: {.cell}\n\n```{.r .cell-code}\n# data_frame_2 <- data_frame_1 %>%\n#   mutate(Men_percent = (Men/Total)*100)\n```\n:::\n\n\n+ # Within the `mutate()` function, we'll specify a name for our new column and then use `=` to indicate how you want the values that fill it to be calculated.\n\n## Calculating women percent and using `mutate()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecent_grads_select <- recent_grads_select %>%\n  mutate(Women_percent = round((Women/Total)*100,2))\n\nrecent_grads_select$Women_percent\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 12.06 10.19 15.30 10.73 34.16 14.50 44.14 53.57 11.96 19.65\n```\n:::\n:::\n\n\n\n## Filtering by Single Criteria\n\n+ Getting closer towards data that meets our criteria\n\n+ Removing data that does not meet our criteria Women_percent >= 40%\n\n+ To remove majors with percentages of women graduates below 40 percent, we'll use another dplyr function: `filter()`\n\n+  We can use `filter()` to specify conditions that values of a variable must meet\n\n## General filter code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# data_frame_2 <- data_frame_1 %>%\n#   filter(Men_percent < 70)\n\n# data_frame_2 <- data_frame_1 %>%\n#   filter(Major_category == \"Physical Science\")\n```\n:::\n\n\n## Practice Exercise\n\n+ Filter the recent_grads_select data frame to create a new data frame called recent_grads_money that contains only data on majors where recent graduates' median (the Median variable) salary is greater than 70,000 USD.\n\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecent_grads_money <- recent_grads %>%\n  filter(Median > 70000)\nrecent_grads_money[15:18]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  Median College_jobs Non_college_jobs Low_wage_jobs\n   <dbl>        <dbl>            <dbl>         <dbl>\n1  75000          350              257            50\n2  73000          456              176             0\n```\n:::\n:::\n\n\n\n## Filtering by Multiple Conditions: Meeting At Least One Criterion\n\n+ What if we wanted to create a new data frame containing college majors that met either of the following criteria:\n  \n   + Majors in the Engineering catagory `(Major_category == \"Engineering\")`\n   + Majors with over 1,000 total graduates `(Total > 1000)`\n   \n+ \"Majors that are either in the engineering category or have over 1,000 graduates\"\n\n+ Archieved by the or operator |\n\n\n## Example 1\n\n+ Describe what this code does\n\n::: {.cell}\n\n```{.r .cell-code}\nrecent_grads_engineering1000 <- recent_grads %>%\n  filter(Major_category == \"Engineering\" | Total > 1000)\nrecent_grads_engineering1000[1:5,c(\"Major_category\",\"Total\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  Major_category Total\n  <chr>          <dbl>\n1 Engineering     2339\n2 Engineering      756\n3 Engineering      856\n4 Engineering     1258\n5 Engineering    32260\n```\n:::\n:::\n\n\n## Example 2\n\n+ Describe what the code below does\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecent_grads_science <- recent_grads_select %>%\n  filter(Major_category == \"Engineering\" | Major_category == \"Physical Science\")\nrecent_grads_science[1:4, c(\"Major_category\",\"Total\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  Major_category Total\n  <chr>          <dbl>\n1 Engineering     2339\n2 Engineering      756\n3 Engineering      856\n4 Engineering     1258\n```\n:::\n:::\n\n\n## Filtering with AND `&` \n\n+ Both Criteria must be met\n\n+ To use `filter()` to create a new data frame containing only engineering college majors with more than 1,000 total graduates, we'd write:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecent_grads_engineers1000 <- recent_grads %>%\n  filter(Major_category == \"Engineering\" & Total > 1000)\n\nrecent_grads_engineers1000[c(\"Major_category\",\"Total\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  Major_category Total\n  <chr>          <dbl>\n1 Engineering     2339\n2 Engineering     1258\n3 Engineering    32260\n4 Engineering     2573\n5 Engineering    91227\n6 Engineering    81527\n```\n:::\n:::\n\n\n## Winding Up\n\n+ Let's create a new data frame containing only college majors that meet all three of our criteria for college majors.\n\n+ To accomplish this, we'll use `filter()` and the & operator to filter rows in the recent_grads_science data frame to retain only majors that have women as greater than 40 percent of total graduates and median salaries above 40,000 USD.\n\n\n## Code and Output\n\n\n::: {.cell}\n\n```{.r .cell-code}\npotential_majors <- recent_grads_science %>%\n  filter(Women_percent > 40 & Median > 40000)\n\npotential_majors_selected <- recent_grads_science %>%\n  filter(Women_percent > 40 & Median > 40000) %>%\n  select(Major,Total,Major_category)\n\nprint(potential_majors_selected)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  Major     Total Major_category  \n  <chr>     <dbl> <chr>           \n1 ASTRONOMY  1792 Physical Science\n```\n:::\n:::\n\n\n## Arranging Data Frames by Variables\n\n+ To arrange our data frame rows by TOTAL, we'll use another function in the dplyr package: ``\n`arrange()`.\n\n+ The `arrange()` function lets you specify a variable we want to use to re-order the rows of your data frame. Let's say we want to arrange data_frame_1 by Total:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# data_frame_2 <- data_frame_1 %>% \n#   arrange(Total)\n```\n:::\n\n\n+ By default, `arrange()` orders the rows of a data frame by the specified variable in ascending order, from lowest to highest.\n\n+ For descending order use desc()\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# data_frame_2 <- data_frame_1 %>% \n#  arrange(desc(Total))\n```\n:::\n\n\n## Using multiple variables to arrange\n\n+  We can arrange data frames by multiple numeric variables as well. If we specify multiple variables, \n+ R will reorder rows of the data frame by each variable in order, moving from left to right.\n\n+ To arrange data_frame_1 in order of ascending Total and descending Men_percent, we could write:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# data_frame_2 <- data_frame_1 %>% \n#  arrange(Total, desc(Men_percent))\n```\n:::\n\n\n## Final Task\n\n+ Create a new data frame, my_majors, containing the data in the potential_majors data frame arranged  in order of increasing Unemployment_rate and decreasing Median (in that order).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n my_majors <- potential_majors %>% \n   arrange(Unemployment_rate, desc(Median))\nmy_majors[,1:6]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 6\n  Major     Major_category     Men Women Total Median\n  <chr>     <chr>            <dbl> <dbl> <dbl>  <dbl>\n1 ASTRONOMY Physical Science   832   960  1792  62000\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}