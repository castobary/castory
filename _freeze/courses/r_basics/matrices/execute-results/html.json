{
  "hash": "ce25f9e58884d4d44afc5f4005572157",
  "result": {
    "markdown": "---\ntitle: \"Working with Matrices\"\nauthor: \"Castory Munishi\"\ndate: 10/28/2020\nexecute: \n  echo: true\n  warning: false\nformat: revealjs\neditor: visual\n---\n\n\n\n## 1. Matrices : Two Dimensional Data Structures\n\nLet's say you've been accepted a number of top universities. To decide which to attend, you want to find a way to score them using data on education quality, influence, cost, and other factors.\n\nWe will use matrices to perform this analysis\n\nWhile vectors are one-dimensional, matrices are two-dimensional and consist of rows and columns in a rectangular layout.\n\nMatrices hold data of one type (such as numeric or logical).\n\nA matrix can contain as many rows and columns as needed\n\n## 2. Combining Vectors to Matrices\n\nBelow are vectors containing rankings for each university\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharvard <- c(1,1,1,1,3)\nstanford <- c(2,9,3,4,10)\nMIT <- c(3,3,2,2,1)\ncambridge <- c(4,2,6,13,48)\noxford <- c(5,7,12,9,15)\ncolumbia <- c(6,13,13,12,4)\n```\n:::\n\n\nTo combine vectors into a matrix, we can use the function `rbind()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharv_stan <- rbind(harvard, stanford)\n```\n:::\n\n\n\n## Practice 1\n\nWe have vectors containing ranking data for each university. Create a matrix, named uni_matrix, from these vectors using the `rbind()` function:\n\n+ harvard\n+ stanford\n+ MIT\n+ cambridge\n+ oxford\n+ columbia\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuni_matrix <- rbind(harvard,stanford,MIT,cambridge,oxford,columbia)\n```\n:::\n\n\n## 3. Naming Matrix Rows and Columns\n\n+ When we use the `rbind()` function to create a matrix from vectors with name attributes, the vector names are retained as row name attributes. \n\n+ However, our columns don't have any name attributes associated with them.\n\n+ Adding names to rows or columns of a matrix is similar to naming elements of a vector.\n\n+ Attributes are not stored as data structures, you can not perform operations on them\n\n+ Since matrices have both rows and columns, there are separate functions for adding name attributes to each:\n\n      - Rows: `rownames()`\n      - Columns: `colnames()`\n      \n## Example : Naming havard_stan matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharv_stan <- rbind(harvard, stanford)\n\ncolnames(harv_stan) <- c(\"world_rank\",\"quality_of_education\",\n                         \"influence\",\"broad_impact\",\"patents\")\nprint(harv_stan)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         world_rank quality_of_education influence broad_impact patents\nharvard           1                    1         1            1       3\nstanford          2                    9         3            4      10\n```\n:::\n:::\n\n\n### Practice 2\n\n+ Name the columns of uni_matrix using the categories vector.\n\n## 4. Finding Matrix Dimensions\n\n- In deciding which university to go, you need to know the tution fees\n\n- The following vector contains tuition fees for the universities\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntuition <- c(43280, 45000, 45016, 49350, 28450, 55161)\n```\n:::\n\n\nwe need to add the tuition vector to uni_matrix as a column. First, we should make sure that the new vector is of the right dimensions before combining it with our matrix. \n\n## Dimensions\n\n+ The number of rows and columns in a matrix\n+ the function `dim()` returns dimensions\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(harv_stan)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 5\n```\n:::\n:::\n\n\nIf we want to add the vector harv_stan_tuition as a new column to the harv_stan matrix, we'll want the length of harv_stan_tuition to equal the number of rows in harv_stan\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dim(harv_stan)[1] == length(harv_stan_tuition)\n```\n:::\n\n\n## Practice 3\n\nWrite an expression to return TRUE if the number of rows in uni_matrix is equal to the length of tuition.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntuition <- c(43280,45000,45016,49350,28450,55161)\ndim(uni_matrix)[1] == length(tuition)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n\n## Adding Columns to Matrices\n\n+ Now that we have confirmed that the tuition vector is the same length as the number of rows in uni_matrix, we can add it to the matrix as a column.\n\n+ Earlier in this mission, we used the `rbind()` function to combine the university rankings vectors into a single matrix.\n\n+ The `rbind()` functions combines vectors or matrices by row.\n\n+ To add a vector to a matrix as a column or to join two matrices together by column, we'll use the `cbind()` function. The `cbind()` function combines vectors or matrices by column.\n\n+ Example : Adding tution column\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#cbind(harv_stan, harv_stan_tuition)\n```\n:::\n\n\n\n## Practice 4\n\n+ Add the tuition vector as a new column to uni_matrix.\n+ Save the new matrix containing rankings and tuition for each university as complete_matrix.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntuition <- c(43280, 45000, 45016, 49350, 28450, 55161)\ncomplete_matrix <- cbind(uni_matrix, tuition)\n```\n:::\n\n\n\n## Indexing Matrices By Element\n\n+ Matrices can be indeced either :\n  \n    + Index to select specific values\n    + Index to select rows or columns\n    \n+ Example: To index harv_stan to extract Stanford's patent ranking, we can index by `row (2)` and `column (5)` positions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharv_stan[2, 5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\n+ Notice that, as with the output of the `dim()` function, row always comes before column for indexing operations.\n\n+ Indexing can also be done using names instead of positions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharv_stan[\"stanford\", \"patents\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\n\n## Indexing Multiple Elements\n\n+ Let's index to select broad_impact and patents for Harvard and Stanford - The two columns are next to each other:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharv_stan[2, 4:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nbroad_impact      patents \n           4           10 \n```\n:::\n:::\n\n\n+ We can also index matrices to extract elements that aren't next to each other. \n+ Let's say we're interested in extracting world_rank and influence for Harvard and Stanford:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharv_stan[c(1,2), c(1,3)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         world_rank influence\nharvard           1         1\nstanford          2         3\n```\n:::\n:::\n\n\n+ A similar operation can be done using column names\n\n\n## Practice 5\n\n+ Index by name attributes to extract the following values from complete_matrix:\n\n      + Oxford's influence rank . Store the output as oxford_influence\n      + Cambridge's and Stanford's patents rank. Store the output as cam_stan_patents\n      \n      \n\n::: {.cell}\n\n```{.r .cell-code}\ncomplete_matrix <- cbind(uni_matrix, tuition)\n#oxford_influence <- complete_matrix[\"oxford\", \"influence\"]\n#cam_stan_patents <- complete_matrix[c(\"cambridge\", \"stanford\"), \"patents\"]\n```\n:::\n\n\n## Subsetting Matrices by Rows and Columns\n\n+ An entire row or column can be extracted of which can be a single or multiple extraction\n\n+ For example, let's index harv_stan to extract all the rankings for Harvard:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharv_stan[\"harvard\",]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          world_rank quality_of_education            influence \n                   1                    1                    1 \n        broad_impact              patents \n                   1                    3 \n```\n:::\n:::\n\n\n+ If we want to select the quality of education rankings for each university in our matrix,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharv_stan[,\"quality_of_education\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n harvard stanford \n       1        9 \n```\n:::\n:::\n\n\n## Indexing Multiple rows and columns\n\n+ To select quality_of_education, influence, and broad_impact rankings for all universities, we would index by those columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharv_stan[,c(\"quality_of_education\", \"influence\", \"broad_impact\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         quality_of_education influence broad_impact\nharvard                     1         1            1\nstanford                    9         3            4\n```\n:::\n:::\n\n\n+ Note that, since we selected columns, c(\"quality_of_education\", \"influence\", \"broad_impact\") comes after the comma. \n\n+ If we were indexing to select multiple rows, they would come before the comma.\n\n## Practice 6\n\n+ Index complete_matrix to extract the following:\n \n    + Oxford's rankings. Store the output as oxford_rank\n    + Influence ranks for all universities. Store the output as influence\n    + All of Harvard's and MIT's rankings.Store the output as harv_mit_rank\n    + Influence and patents rankings for all universities.Store the output as influence_patents\n    \n\n::: {.cell}\n\n```{.r .cell-code}\n#oxford_rank <- complete_matrix[\"oxford\",]\n#influence <- complete_matrix[,\"influence\"]\n#harv_mit_rank <- complete_matrix[c(\"harvard\", \"MIT\"),]\n#influence_patents <- complete_matrix[,c(\"influence\", \"patents\")]\n```\n:::\n\n\n## Ranking Universities\n\n\n+ Now that we've learned to combine vectors into matrices and to extract elements, let's return to our initial goal: Analyzing the university ranking data to decide on a university to attend.\n\n+ To answer this question, let's develop a score for each university that is an aggregate of the rankings and tuition information available in complete_matrix. \n\n+ We'll rank the universities for each category we have data for: world_rank, quality_of_education, influence, broad_impact, patents, and tuition.\n\n+ Then, we can calculate a score for each university from the sum of its rankings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomplete_matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                        tuition\nharvard   1  1  1  1  3   43280\nstanford  2  9  3  4 10   45000\nMIT       3  3  2  2  1   45016\ncambridge 4  2  6 13 48   49350\noxford    5  7 12  9 15   28450\ncolumbia  6 13 13 12  4   55161\n```\n:::\n:::\n\n\n\n## Ranking II\n\n+ We'll use the `rank() f`unction, along with an expression that indexes the matrix, to specify the category we want to rank the universities by.\n\n+ The `rank()` function returns a vector of numeric values. For example, to rank universities by quality_of_education, we'd write:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#rank(complete_matrix[,\"quality_of_education\"])\n```\n:::\n\n\n\n## Practice 7\n\n+ Use rank() to rank the universities for each of the following categories:\n \n     + world_rank , quality_of_education , influence , broad_impact , patents, tuition\n\n+ Save the ranking vectors generated for each category with the following names:\n \n    + world_rank_rank\n    + quality_of_education_rank\n    + influence_rank\n    + broad_impact_rank\n    + patents_rank\n    + tuition_rank\n    \n\n::: {.cell}\n\n```{.r .cell-code}\n#world_rank_rank <- rank(complete_matrix[,\"world_rank\"])\n#quality_of_education_rank <- rank(complete_matrix[,\"quality_of_education\"])\n#influence_rank <- rank(complete_matrix[,\"influence\"])\n#broad_impact_rank <- rank(complete_matrix[,\"broad_impact\"])\n#patents_rank <- rank(complete_matrix[,\"patents\"])\n#tuition_rank <- rank(complete_matrix[,\"tuition\"])\n```\n:::\n\n\n## Scoring and Ranking Universities\n\n+ Now that we've ranked the six universities by each category, let's combine the vectors containing the ranks into a single matrix (ranks_matrix) using `rbind()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#ranks_matrix <- rbind(world_rank_rank, quality_of_education_rank, influence_rank, broad_impact_rank, patents_rank, tuition_rank)\n```\n:::\n\n\n+ Note that because we used `rbind()`, we combined the vectors by rows. The new matrix contains the vectors for each category stacked one on top of the other. Each university's rankings are in a different column.\n\n+ To calculate an aggregate score for each university, let's calculate the sum of its rankings in every category. We'll use indexing to specify the university column we want to calculate a score for using `sum()`.\n\n+ For example, we'll calculate the sum of the rankings for Harvard:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#sum(ranks_matrix[,\"harvard\"])\n```\n:::\n\n\n\n## Practice 8\n\nCalculate the sums of each university's rankings in ranks_matrix:\n \n    + harvard\n    + stanford\n    + MIT\n    + cambridge\n    + oxford\n    + columbia\n    \n\n::: {.cell}\n\n```{.r .cell-code}\n#sum(ranks_matrix[,\"harvard\"])\n#sum(ranks_matrix[,\"stanford\"])\n#sum(ranks_matrix[,\"MIT\"])\n#sum(ranks_matrix[,\"cambridge\"])\n#sum(ranks_matrix[,\"oxford\"])\n#sum(ranks_matrix[,\"columbia\"])\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}