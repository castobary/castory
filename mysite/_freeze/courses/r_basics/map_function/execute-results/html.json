{
  "hash": "66bac13dc9cc60d2227e2d6e35a2f7a9",
  "result": {
    "markdown": "---\ntitle: \"The Map Function\"\nauthor: \"Castory Munishi\"\nformat: revealjs\neditor: visual\n---\n\n\n## Dataset in Use\n\n> Our dataset is a collection of test scores of four different students. Each student took five different tests for three subjects: writing, math and science. Over the course of this lesson, we'll perform different analytical tasks that will require us to vectorize different functions.\n\n## Importing the datasets\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\n  readr,\n  dplyr,\n  magrittr,\n  stringr,\n  purrr\n)\n\nds <- read_csv(\"datasets/scores.csv\")\n\nhead(ds,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 6\n  names   assignment_number writing_score math_score science_score math_extra_…¹\n  <chr>               <dbl> <chr>         <chr>      <chr>         <chr>        \n1 Michael                 1 56%           50%        79%           High         \n2 Michael                 2 84%           59%        72%           None         \n3 Michael                 3 64%           84%        78%           Low          \n# … with abbreviated variable name ¹​math_extra_credit\n```\n:::\n:::\n\n\n## Challenge One\n\n-   Each of the student scores are written as strings can't be used in math\n-   Need to convert them to numbers to be useful in calculations\n-   Need to vectorize over multiple columns\n\n## Next Step\n\n-   Create a function called `format_score()` that:\n-   Takes in a single string as an input.\n-   Removes the % sign from the string.\n-   Converts the string into a number using the `as.numeric()` function. This useful function takes in a string and will convert it into a number if it resembles a number.\n-   Outputs that number (e.g. The string \"74%\" should be converted to the number 74.)\n-   Pass percent_string into the `format_score()`function and assign the output to the variable converted_string\n\n## Creating a Custom Function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nformat_score <- function(score){\n  fmt_string <- str_replace(score, \"%\", \"\")\n  num <- as.numeric(fmt_string)\n  \n  return(num)\n}\n\nmy_string <- \"74%\"\nformat_score(my_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 74\n```\n:::\n:::\n\n\n## Vectoring a function\n\n-   The diagram illustrates vectorization of a function called `add_one()`\n\n![](images/map-diagram.png)\n\n## Map Function\n\n-   `map()` is from purrr package\n-   It's used to vectorize functions\n-   It takes two arguments\n    -   A vector or a list\n    -   The function to be applied\n\n## Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Input vector\ninputs <- 1:5\n\n# Function to vectorize\nadd_one <- function(value) {\n  return(value + 1)\n}\n\n\noutputs <- map(inputs, add_one)\ntypeof(outputs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n\n```{.r .cell-code}\noutputs2 <- map_dbl(inputs, add_one)\ntypeof(outputs2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n\n-   The output of `map()` is a list\n-   It can be modified `unlist()` function or using variants of it such as `map_dbl()`\n\n## Task\n\n-   Give the vector `input_scores <- c(\"83%\", \"29%\", \"76%\")`\n-   Map the function `format_scores()`\n-   Assign the result to output_scores\n-   Take the third element and assign it to third_element\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput_scores <- c(\"83%\", \"29%\", \"76%\")\n\noutput_scores <- map(input_scores,format_score)\n\nthird_element <- output_scores[[3]]\n```\n:::\n\n\n## Creating a New Column with `map()`\n\n-   use the `mutate()` function to directly create the new columns with the `map()`.\n\n-   What matters is that `map()` creates a list that has the same number of elements as the number of rows in the data.\n\n-   This output list will be used as the new column in the data!\n\n## Creating a new writing score column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds %<>%\n  mutate(new_writing_score=map(writing_score,format_score)) %>%\n  mutate(new_science_score=map(science_score,format_score))\n```\n:::\n\n\n## Two Input Variation of Map - `map2()`\n\n-   A relative of the `map()` function `map2()`\n-   Can work with two arguments\n\n![](images/map2-diagram.png)\n\n## `map2()` Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput_first <- 1:5\ninput_second <- 6:10\n\nadd_two_values <- function(x,y){\n  return(x+y)\n}\n\noutputs <- map2(input_first,input_second,add_two_values)\n```\n:::\n\n\n## Using `map2()`\n\n> In the student_scores dataset, we have another column called math_extra_credit. This column is a string, and it represents the amount of extra credit a student earned on a particular math test. Depending on how much extra credit is earned (\"None,\" \"Low,\" or \"High\"), the student can increase their math score. We need to account for this when we calculate the math score.\n\n## Task\n\nCreate a new function called `add_extra_credit()`. It should take two inputs: the first one should be a number (representing a score) and the second one should be a string (representing an amount of extra credit)\n\n-   If the string is \"None\": Don't add any extra points to the number input.\n-   If the string is \"Low\": Add 1 extra point to the number input\n-   If the string is \"High\": Add 5 extra points to the number input\n\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput_score <- 50\nadd_extra_credit <- function(score, note) {\n  if (note == \"None\") {\n      points_to_add <- 0\n  } else if (note == \"Low\") {\n      points_to_add <- 1\n  } else {\n      points_to_add <- 5\n  }\n    \n  return(score + points_to_add)\n}\nadd_extra_credit(input_score,\"None\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50\n```\n:::\n\n```{.r .cell-code}\nadd_extra_credit(input_score,\"High\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 55\n```\n:::\n:::\n\n\n## Task\n\nUsing the `add_extra_credit()`Create a new column in the student_scores dataset called adjusted_math_score. This column should represent the math score that a student received on a test, accounting for the extra credit they got on the test.\n\n-   The new_math_score column contains the math score in number format.\n-   The math_extra_credit column contains the strings describing how much extra credit was earned.\n-   Make sure to use the `unlist()` function to convert the result from `map2()` into a vector.\n\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds %<>%\n  mutate(math_score=map(math_score,format_score))%>%\n  mutate(adjusted_math_score=unlist(map2(math_score,math_extra_credit,add_extra_credit)))\n```\n:::\n\n\n## Working with Lists\n\n-   `map()` functions can work with lists\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput_list <- list(\n  c(1,2),\n  c(3,4),\n  c(5,6),\n  c(7,8),\n  c(9,10)\n)\n\noutput <- map(input_list,sum)\n```\n:::\n\n\n## Above and Beyond\n\n-   The `pmap()` function\n-   A variant of `map()` function\n-   It can take multiple arguments\n-   p variable amount of inputs\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}